// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = "mysql://pkbiohjtb6wsgixab1xy:pscale_pw_lhUiNCitJQrtvvOR26pfj9m4xFnmuGQ0L3zJIl16Laa@us-west.connect.psdb.cloud/dev2dev?sslaccept=strict"
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Student {
    id         String   @id @default(cuid())
    nickname   String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    Question   Question @relation(fields: [questionID], references: [id], onDelete: Cascade)
    questionID String   @unique
}

model Mentor {
    id         String   @id @default(cuid())
    nickname   String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    javascript Int      @default(0)
    typescript Int      @default(0)
    python     Int      @default(0)
    java       Int      @default(0)
    cpp        Int      @default(0)
}

model Question {
    id         String   @id @default(cuid())
    question   String
    code       String
    skill      String
    difficulty Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    Student    Student?
}
